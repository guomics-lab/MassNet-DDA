name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
        cuda-version: ['11.8.0']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install CUDA
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: ${{ matrix.cuda-version }}
        method: 'network'
        sub-packages: '["nvcc", "cudart", "cublas", "curand", "cusolver", "cusparse"]'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
        pip install -r requirements.txt
        pip install -e .

    - name: Run tests
      run: |
        pytest tests/ --cov=XuanjiNovo --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run linters
      run: |
        flake8 XuanjiNovo tests
        black --check XuanjiNovo tests
        isort --check-only XuanjiNovo tests
        mypy XuanjiNovo

  build-extensions:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install CUDA
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '11.8.0'
        method: 'network'
        sub-packages: '["nvcc", "cudart"]'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ninja
        pip install -r requirements.txt
    
    - name: Build C++ extensions
      run: |
        python setup.py build_ext --inplace
